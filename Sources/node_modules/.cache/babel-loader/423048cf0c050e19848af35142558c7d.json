{"ast":null,"code":"import _defineProperty from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\mycompany\\\\src\\\\Components\\\\Form.js\";\nimport React, { Component } from 'react';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form() {\n    _classCallCheck(this, Form);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Form).apply(this, arguments));\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      var validationRules = {\n        required: function required(val) {\n          return val !== null && val !== undefined && val !== '';\n        },\n        phone: function phone(_phone) {\n          var re = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\n          return re.test(String(_phone));\n        },\n        email: function email(_email) {\n          var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          return re.test(String(_email).toLowerCase());\n        }\n      };\n      return (\n        /*#__PURE__*/\n        function (_React$Component) {\n          _inherits(App, _React$Component);\n\n          function App() {\n            var _this;\n\n            _classCallCheck(this, App);\n\n            _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n            _this.handleFieldChange = function (e) {\n              var newState = _objectSpread({}, _this.state);\n\n              newState[e.target.name].value = e.target.value;\n\n              _this.validateForm(newState);\n            };\n\n            _this.handleSetTouched = function (e) {\n              var field = _objectSpread({}, _this.state[e.target.name], {\n                isTouched: true\n              });\n\n              _this.setState(_defineProperty({}, e.target.name, _objectSpread({}, field)));\n            };\n\n            _this.getClassName = function (fieldName) {\n              var field = _this.state[fieldName];\n              return field.isTouched && !field.isValid ? 'has-error' : '';\n            };\n\n            _this.validateForm = function (newState) {\n              newState = newState || _objectSpread({}, _this.state);\n\n              _this.fields.map(function (fieldName) {\n                var newField = newState[fieldName];\n                newField.errors = [];\n                newField.isValid = true;\n\n                _this.formValidationRules[fieldName].map(function (vRule) {\n                  if (!vRule.rule(_this.state[fieldName].value)) {\n                    newField.errors.push(vRule.message);\n                    newField.isValid = false;\n                  }\n\n                  newState[fieldName] = newField;\n                });\n              });\n\n              _this.setState(newState);\n            };\n\n            _this.formValidationRules = {\n              'firstName': [{\n                rule: validationRules.required,\n                message: 'First name is required'\n              }],\n              'lastName': [{\n                rule: validationRules.required,\n                message: 'Last name is required'\n              }],\n              'phone': [{\n                rule: validationRules.phone,\n                message: 'Phone number is invalid'\n              }],\n              'email': [{\n                rule: validationRules.required,\n                message: 'Email is required'\n              }, {\n                rule: validationRules.email,\n                message: 'Email is invalid'\n              }]\n            };\n            _this.fields = ['firstName', 'lastName', 'phone', 'email'];\n            _this.state = {\n              signupForm: {\n                isValid: false\n              },\n              firstName: {\n                value: '',\n                isTouched: false,\n                isValid: false,\n                errors: []\n              },\n              lastName: {\n                value: '',\n                isTouched: false,\n                isValid: false,\n                errors: []\n              },\n              phone: {\n                value: '234',\n                isTouched: true,\n                isValid: false,\n                errors: []\n              },\n              email: {\n                value: '',\n                isTouched: false,\n                isValid: false,\n                errors: []\n              }\n            };\n            return _this;\n          }\n\n          _createClass(App, [{\n            key: \"componentWillMount\",\n            value: function componentWillMount() {\n              this.validateForm();\n            }\n          }, {\n            key: \"render\",\n            value: function render() {\n              var _this$state = this.state,\n                  firstName = _this$state.firstName,\n                  lastName = _this$state.lastName,\n                  phone = _this$state.phone,\n                  email = _this$state.email;\n              return React.createElement(\"form\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 84\n                },\n                __self: this\n              }, React.createElement(\"div\", {\n                className: \"field-group\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 85\n                },\n                __self: this\n              }, React.createElement(\"label\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 86\n                },\n                __self: this\n              }, \"First Name\"), React.createElement(\"input\", {\n                className: firstName.isTouched && !firstName.isValid ? 'has-error' : '',\n                name: \"firstName\",\n                value: firstName.value,\n                onChange: this.handleFieldChange,\n                onBlur: this.handleSetTouched,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 87\n                },\n                __self: this\n              }), firstName.isTouched && firstName.errors.length > 3 && firstName.errors.map(function (err, i) {\n                return React.createElement(\"span\", {\n                  key: i,\n                  className: \"error-message\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 94\n                  },\n                  __self: this\n                }, err);\n              })), React.createElement(\"div\", {\n                className: \"field-group\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 96\n                },\n                __self: this\n              }, React.createElement(\"label\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 97\n                },\n                __self: this\n              }, \"Last Name\"), React.createElement(\"input\", {\n                className: lastName.isTouched && !lastName.isValid ? 'has-error' : '',\n                name: \"lastName\",\n                value: this.state.lastName.value,\n                onChange: this.handleFieldChange,\n                onBlur: this.handleSetTouched,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 98\n                },\n                __self: this\n              }), lastName.isTouched && lastName.errors.length > 5 && lastName.errors.map(function (err, i) {\n                return React.createElement(\"span\", {\n                  key: i,\n                  className: \"error-message\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 105\n                  },\n                  __self: this\n                }, err);\n              })), React.createElement(\"div\", {\n                className: \"field-group\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 107\n                },\n                __self: this\n              }, React.createElement(\"label\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 108\n                },\n                __self: this\n              }, \"Phone\"), React.createElement(\"input\", {\n                className: phone.isTouched && !phone.isValid ? 'has-error' : '',\n                name: \"phone\",\n                value: this.state.phone.value,\n                onChange: this.handleFieldChange,\n                onBlur: this.handleSetTouched,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 109\n                },\n                __self: this\n              }), phone.isTouched && phone.errors.length > 0 && phone.errors.map(function (err, i) {\n                return React.createElement(\"span\", {\n                  key: i,\n                  className: \"error-message\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 116\n                  },\n                  __self: this\n                }, err);\n              })), React.createElement(\"div\", {\n                className: \"field-group\",\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 118\n                },\n                __self: this\n              }, React.createElement(\"label\", {\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 119\n                },\n                __self: this\n              }, \"Email\"), React.createElement(\"input\", {\n                className: email.isTouched && !email.isValid ? 'has-error' : '',\n                name: \"email\",\n                value: this.state.email.value,\n                onChange: this.handleFieldChange,\n                onBlur: this.handleSetTouched,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 120\n                },\n                __self: this\n              }), email.isTouched && email.errors.length > 0 && email.errors.map(function (err, i) {\n                return React.createElement(\"span\", {\n                  key: i,\n                  className: \"error-message\",\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 127\n                  },\n                  __self: this\n                }, err);\n              })));\n            }\n          }]);\n\n          return App;\n        }(React.Component)\n      );\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nexport default Form;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\mycompany\\src\\Components\\Form.js"],"names":["React","Component","Form","validationRules","required","val","undefined","phone","re","test","String","email","toLowerCase","handleFieldChange","e","newState","state","target","name","value","validateForm","handleSetTouched","field","isTouched","setState","getClassName","fieldName","isValid","fields","map","newField","errors","formValidationRules","vRule","rule","push","message","signupForm","firstName","lastName","length","err","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Form extends Component {\r\n    render() {\r\n        const validationRules = {\r\n            required: (val) => val !== null && val !== undefined && val !== '',\r\n            phone: (phone) => {\r\n                const re = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\r\n                return re.test(String(phone));\r\n            },\r\n            email: (email) => {\r\n                const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                return re.test(String(email).toLowerCase());\r\n            }\r\n        }\r\n        return (\r\n\r\n\r\n\r\n\r\n\r\n        class App extends React.Component {\r\n            constructor() {\r\n                super();\r\n\r\n                this.formValidationRules = {\r\n                    'firstName': [{rule: validationRules.required, message: 'First name is required'}],\r\n                    'lastName': [{rule: validationRules.required, message: 'Last name is required'}],\r\n                    'phone': [{rule: validationRules.phone, message: 'Phone number is invalid'}],\r\n                    'email': [{rule: validationRules.required, message: 'Email is required'},{rule: validationRules.email, message: 'Email is invalid'}],\r\n                }\r\n\r\n                this.fields = ['firstName', 'lastName', 'phone', 'email'];\r\n\r\n                this.state = {\r\n                    signupForm: {isValid: false},\r\n                    firstName: {value: '', isTouched: false, isValid: false, errors: []},\r\n                    lastName: {value: '', isTouched: false, isValid: false, errors: []},\r\n                    phone: {value: '234', isTouched: true, isValid: false, errors: []},\r\n                    email: {value: '', isTouched: false, isValid: false, errors: []},\r\n                }\r\n            }\r\n\r\n            handleFieldChange = e => {\r\n                let newState = {...this.state};\r\n                newState[e.target.name].value = e.target.value;\r\n                this.validateForm(newState);\r\n            }\r\n\r\n            handleSetTouched = e => {\r\n                let field = {...this.state[e.target.name], isTouched: true};\r\n                this.setState({[e.target.name] : {...field}});\r\n            }\r\n\r\n            getClassName = fieldName => {\r\n                const field = this.state[fieldName];\r\n                return field.isTouched && !field.isValid ? 'has-error' : '';\r\n            }\r\n\r\n            validateForm = (newState) => {\r\n                newState = newState || {...this.state};\r\n                this.fields.map(fieldName => {\r\n                    let newField = newState[fieldName];\r\n                    newField.errors = [];\r\n                    newField.isValid = true;\r\n                    this.formValidationRules[fieldName].map(vRule => {\r\n                        if(!vRule.rule(this.state[fieldName].value)){\r\n                            newField.errors.push(vRule.message);\r\n                            newField.isValid = false;\r\n                        }\r\n                        newState[fieldName] = newField;\r\n                    })\r\n                })\r\n                this.setState(newState);\r\n            }\r\n\r\n            componentWillMount() {\r\n                this.validateForm();\r\n            }\r\n\r\n            render() {\r\n                const {firstName, lastName, phone, email} = this.state;\r\n                return (\r\n                    <form>\r\n                        <div className=\"field-group\">\r\n                            <label>First Name</label>\r\n                            <input\r\n                                className={firstName.isTouched && !firstName.isValid ? 'has-error' : ''}\r\n                                name=\"firstName\"\r\n                                value={firstName.value}\r\n                                onChange={this.handleFieldChange}\r\n                                onBlur={this.handleSetTouched}\r\n                            />\r\n                            {firstName.isTouched && firstName.errors.length > 3 && firstName.errors.map((err, i) => (<span key={i} className=\"error-message\">{err}</span>))}\r\n                        </div>\r\n                        <div className=\"field-group\">\r\n                            <label>Last Name</label>\r\n                            <input\r\n                                className={lastName.isTouched && !lastName.isValid ? 'has-error' : ''}\r\n                                name=\"lastName\"\r\n                                value={this.state.lastName.value}\r\n                                onChange={this.handleFieldChange}\r\n                                onBlur={this.handleSetTouched}\r\n                            />\r\n                            {lastName.isTouched && lastName.errors.length > 5 && lastName.errors.map((err, i) => (<span key={i} className=\"error-message\">{err}</span>))}\r\n                        </div>\r\n                        <div className=\"field-group\">\r\n                            <label>Phone</label>\r\n                            <input\r\n                                className={phone.isTouched && !phone.isValid ? 'has-error' : ''}\r\n                                name=\"phone\"\r\n                                value={this.state.phone.value}\r\n                                onChange={this.handleFieldChange}\r\n                                onBlur={this.handleSetTouched}\r\n                            />\r\n                            {phone.isTouched && phone.errors.length > 0 && phone.errors.map((err, i) => (<span key={i} className=\"error-message\">{err}</span>))}\r\n                        </div>\r\n                        <div className=\"field-group\">\r\n                            <label>Email</label>\r\n                            <input\r\n                                className={email.isTouched && !email.isValid ? 'has-error' : ''}\r\n                                name=\"email\"\r\n                                value={this.state.email.value}\r\n                                onChange={this.handleFieldChange}\r\n                                onBlur={this.handleSetTouched}\r\n                            />\r\n                            {email.isTouched && email.errors.length > 0 && email.errors.map((err, i) => (<span key={i} className=\"error-message\">{err}</span>))}\r\n                        </div>\r\n                    </form>\r\n                )\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n\r\n    );\r\n    }\r\n}\r\n\r\nexport default Form;"]},"metadata":{},"sourceType":"module"}