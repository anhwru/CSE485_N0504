{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FIRST_GROUP_PATTERN = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\n\nexports.default = format;\nexports.format_national_number_using_format = format_national_number_using_format;\nexports.choose_format_for_number = choose_format_for_number;\nexports.changeInternationalFormatStyle = changeInternationalFormatStyle;\nexports.formatIDDSameCountryCallingCodeNumber = formatIDDSameCountryCallingCodeNumber;\n\nvar _common = require('./common');\n\nvar _parse = require('./parse');\n\nvar _parse2 = _interopRequireDefault(_parse);\n\nvar _IDD = require('./IDD');\n\nvar _metadata = require('./metadata');\n\nvar _metadata2 = _interopRequireDefault(_metadata);\n\nvar _RFC = require('./RFC3966');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar defaultOptions = {\n  formatExtension: function formatExtension(number, extension, metadata) {\n    return '' + number + metadata.ext() + extension;\n  } // Formats a phone number\n  //\n  // Example use cases:\n  //\n  // ```js\n  // format('8005553535', 'RU', 'INTERNATIONAL')\n  // format('8005553535', 'RU', 'INTERNATIONAL', metadata)\n  // format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\n  // format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\n  // format('+78005553535', 'NATIONAL')\n  // format('+78005553535', 'NATIONAL', metadata)\n  // ```\n  //\n\n};\n\nfunction format(arg_1, arg_2, arg_3, arg_4, arg_5) {\n  var _sort_out_arguments = sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5),\n      input = _sort_out_arguments.input,\n      format_type = _sort_out_arguments.format_type,\n      options = _sort_out_arguments.options,\n      metadata = _sort_out_arguments.metadata;\n\n  if (input.country) {\n    // Validate `input.country`.\n    if (!metadata.hasCountry(input.country)) {\n      throw new Error('Unknown country: ' + input.country);\n    }\n\n    metadata.country(input.country);\n  } else if (input.countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);\n  } else return input.phone || '';\n\n  var countryCallingCode = metadata.countryCallingCode();\n  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s\n  // but Babel has a bug and it says \"duplicate variable declaration\".\n\n  var number = void 0;\n\n  switch (format_type) {\n    case 'INTERNATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '+' + countryCallingCode;\n      }\n\n      number = format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n      number = '+' + countryCallingCode + ' ' + number;\n      return add_extension(number, input.ext, metadata, options.formatExtension);\n\n    case 'E.164':\n      // `E.164` doesn't define \"phone number extensions\".\n      return '+' + countryCallingCode + nationalNumber;\n\n    case 'RFC3966':\n      return (0, _RFC.formatRFC3966)({\n        number: '+' + countryCallingCode + nationalNumber,\n        ext: input.ext\n      });\n\n    case 'IDD':\n      if (!options.fromCountry) {\n        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\n      }\n\n      var IDDPrefix = (0, _IDD.getIDDPrefix)(options.fromCountry, metadata.metadata);\n\n      if (!IDDPrefix) {\n        return;\n      }\n\n      if (options.humanReadable) {\n        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata);\n\n        if (formattedForSameCountryCallingCode) {\n          number = formattedForSameCountryCallingCode;\n        } else {\n          number = IDDPrefix + ' ' + countryCallingCode + ' ' + format_national_number(nationalNumber, 'INTERNATIONAL', metadata);\n        }\n\n        return add_extension(number, input.ext, metadata, options.formatExtension);\n      }\n\n      return '' + IDDPrefix + countryCallingCode + nationalNumber;\n\n    case 'NATIONAL':\n      // Legacy argument support.\n      // (`{ country: ..., phone: '' }`)\n      if (!nationalNumber) {\n        return '';\n      }\n\n      number = format_national_number(nationalNumber, 'NATIONAL', metadata);\n      return add_extension(number, input.ext, metadata, options.formatExtension);\n  }\n} // This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\n\n\nvar FIRST_GROUP_PATTERN = exports.FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nfunction format_national_number_using_format(number, format, useInternationalFormat, includeNationalPrefixForNationalFormat, metadata) {\n  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : format.nationalPrefixFormattingRule() && (!format.nationalPrefixIsOptionalWhenFormatting() || includeNationalPrefixForNationalFormat) ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());\n\n  if (useInternationalFormat) {\n    return changeInternationalFormatStyle(formattedNumber);\n  }\n\n  return formattedNumber;\n}\n\nfunction format_national_number(number, format_as, metadata) {\n  var format = choose_format_for_number(metadata.formats(), number);\n\n  if (!format) {\n    return number;\n  }\n\n  return format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', true, metadata);\n}\n\nfunction choose_format_for_number(available_formats, national_number) {\n  for (var _iterator = available_formats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _format = _ref; // Validate leading digits\n\n    if (_format.leadingDigitsPatterns().length > 0) {\n      // The last leading_digits_pattern is used here, as it is the most detailed\n      var last_leading_digits_pattern = _format.leadingDigitsPatterns()[_format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format\n\n\n      if (national_number.search(last_leading_digits_pattern) !== 0) {\n        continue;\n      }\n    } // Check that the national number matches the phone number format regular expression\n\n\n    if ((0, _common.matches_entirely)(national_number, _format.pattern())) {\n      return _format;\n    }\n  }\n} // Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\n//\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\n//\n// \"The country calling code for all countries participating in the NANP is 1.\n// In international format, an NANP number should be listed as +1 301 555 01 00,\n// where 301 is an area code (Maryland).\"\n//\n// I personally prefer the international format without any punctuation.\n// For example, brackets are remnants of the old age, meaning that the\n// phone number part in brackets (so called \"area code\") can be omitted\n// if dialing within the same \"area\".\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\n// He has a couple of seconds to memorize that number until it passes by.\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\n// but with hyphens instead of spaces the grouping is more explicit.\n// I personally think that hyphens introduce visual clutter,\n// so I prefer replacing them with spaces in international numbers.\n// In the modern age all output is done on displays where spaces are clearly distinguishable\n// so hyphens can be safely replaced with spaces without losing any legibility.\n//\n\n\nfunction changeInternationalFormatStyle(local) {\n  return local.replace(new RegExp('[' + _common.VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n} // Sort out arguments\n\n\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5) {\n  var input = void 0;\n  var format_type = void 0;\n  var options = void 0;\n  var metadata = void 0; // Sort out arguments.\n  // If the phone number is passed as a string.\n  // `format('8005553535', ...)`.\n\n  if (typeof arg_1 === 'string') {\n    // If country code is supplied.\n    // `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\n    if (typeof arg_3 === 'string') {\n      format_type = arg_3;\n\n      if (arg_5) {\n        options = arg_4;\n        metadata = arg_5;\n      } else {\n        metadata = arg_4;\n      }\n\n      input = (0, _parse2.default)(arg_1, {\n        defaultCountry: arg_2,\n        extended: true\n      }, metadata);\n    } // Just an international phone number is supplied\n    // `format('+78005553535', 'NATIONAL', [options], metadata)`.\n    else {\n        if (typeof arg_2 !== 'string') {\n          throw new Error('`format` argument not passed to `formatNumber(number, format)`');\n        }\n\n        format_type = arg_2;\n\n        if (arg_4) {\n          options = arg_3;\n          metadata = arg_4;\n        } else {\n          metadata = arg_3;\n        }\n\n        input = (0, _parse2.default)(arg_1, {\n          extended: true\n        }, metadata);\n      }\n  } // If the phone number is passed as a parsed number object.\n  // `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\n  else if (is_object(arg_1)) {\n      input = arg_1;\n      format_type = arg_2;\n\n      if (arg_4) {\n        options = arg_3;\n        metadata = arg_4;\n      } else {\n        metadata = arg_3;\n      }\n    } else throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.');\n\n  if (format_type === 'International') {\n    format_type = 'INTERNATIONAL';\n  } else if (format_type === 'National') {\n    format_type = 'NATIONAL';\n  } // Validate `format_type`.\n\n\n  switch (format_type) {\n    case 'E.164':\n    case 'INTERNATIONAL':\n    case 'NATIONAL':\n    case 'RFC3966':\n    case 'IDD':\n      break;\n\n    default:\n      throw new Error('Unknown format type argument passed to \"format()\": \"' + format_type + '\"');\n  } // Apply default options.\n\n\n  if (options) {\n    options = _extends({}, defaultOptions, options);\n  } else {\n    options = defaultOptions;\n  }\n\n  return {\n    input: input,\n    format_type: format_type,\n    options: options,\n    metadata: new _metadata2.default(metadata)\n  };\n} // Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n\n/* istanbul ignore next */\n\n\nvar is_object = function is_object(_) {\n  return (typeof _ === 'undefined' ? 'undefined' : _typeof(_)) === 'object';\n};\n\nfunction add_extension(number, ext, metadata, formatExtension) {\n  return ext ? formatExtension(number, ext, metadata) : number;\n}\n\nfunction formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata) {\n  var fromCountryMetadata = new _metadata2.default(toCountryMetadata.metadata);\n  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.\n\n  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\n    // For NANPA regions, return the national format for these regions\n    // but prefix it with the country calling code.\n    if (toCountryCallingCode === '1') {\n      return toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', toCountryMetadata);\n    } // If regions share a country calling code, the country calling code need\n    // not be dialled. This also applies when dialling within a region, so this\n    // if clause covers both these cases. Technically this is the case for\n    // dialling from La Reunion to other overseas departments of France (French\n    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\n    // this edge case for now and for those cases return the version including\n    // country calling code. Details here:\n    // http://www.petitfute.com/voyage/225-info-pratiques-reunion\n    //\n\n\n    return format_national_number(number, 'NATIONAL', toCountryMetadata);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}