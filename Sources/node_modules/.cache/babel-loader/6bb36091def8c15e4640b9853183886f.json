{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _class2, _temp, _initialiseProps; // import InputSmart from './InputSmart'\n\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _custom = require('libphonenumber-js/custom');\n\nvar _InputBasic = require('./InputBasic');\n\nvar _InputBasic2 = _interopRequireDefault(_InputBasic);\n\nvar _Flag = require('./Flag');\n\nvar _Flag2 = _interopRequireDefault(_Flag);\n\nvar _PropTypes = require('./PropTypes');\n\nvar _inputControl = require('./input-control');\n\nvar _countries = require('./countries');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // `PureComponent` is only available in React >= 15.3.0.\n\n\nvar PureComponent = _react2.default.PureComponent || _react2.default.Component;\n\nvar PhoneNumberInput = (0, _reactLifecyclesCompat.polyfill)(_class = (_temp = _class2 = function (_PureComponent) {\n  _inherits(PhoneNumberInput, _PureComponent);\n\n  function PhoneNumberInput(props) {\n    _classCallCheck(this, PhoneNumberInput);\n\n    var _this = _possibleConstructorReturn(this, (PhoneNumberInput.__proto__ || Object.getPrototypeOf(PhoneNumberInput)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var _this$props = _this.props,\n        value = _this$props.value,\n        country = _this$props.country,\n        countries = _this$props.countries,\n        countryOptions = _this$props.countryOptions,\n        labels = _this$props.labels,\n        international = _this$props.international,\n        metadata = _this$props.metadata;\n\n    if (country) {\n      validateCountry(country, metadata);\n    }\n\n    if (countries) {\n      validateCountries(countries, metadata);\n    }\n\n    if (countryOptions) {\n      validateCountryOptions(countryOptions, metadata);\n    }\n\n    var parsed_number = (0, _inputControl.parsePhoneNumber)(value, metadata);\n    var pre_selected_country = (0, _inputControl.getPreSelectedCountry)(parsed_number, country, countries || (0, _countries.getCountryCodes)(labels), international, metadata);\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: pre_selected_country,\n      // Generate country `<select/>` options.\n      country_select_options: generate_country_select_options(_this.props),\n      // `parsed_input` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value`is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `parsed_input` is `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `parsed_input` is `+78005553535`.\n      parsed_input: generateParsedInput(value, parsed_number, _this.props),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `parsed_input` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `parsed_input` and `country` should be updated.\n      value: value\n    };\n    return _this;\n  }\n\n  _createClass(PhoneNumberInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props = this.props,\n          country = _props.country,\n          onCountryChange = _props.onCountryChange;\n      var selectedCountry = this.state.country;\n\n      if (onCountryChange && selectedCountry !== country) {\n        onCountryChange(selectedCountry);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _props2 = this.props,\n          country = _props2.country,\n          countries = _props2.countries,\n          countryOptions = _props2.countryOptions,\n          onCountryChange = _props2.onCountryChange,\n          metadata = _props2.metadata;\n\n      if (country && country !== prevProps.country) {\n        validateCountry(country, metadata);\n      }\n\n      if (countries && countries !== prevProps.countries) {\n        validateCountries(countries, metadata);\n      }\n\n      if (countryOptions && countryOptions !== prevProps.countryOptions) {\n        validateCountryOptions(countryOptions, metadata);\n      }\n\n      if (onCountryChange && this.state.country !== prevState.country) {\n        onCountryChange(this.state.country);\n      }\n    } // Country `<select/>` `onChange` handler.\n    // Phone number `<input/>` `onKeyDown` handler.\n    // `<input/>` `onChange` handler.\n    // Updates `value` property accordingly.\n    // (so that they are kept in sync).\n    // `parsed_input` must be a parsed phone number\n    // or an empty string.\n    // E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n    // Toggles the `--focus` CSS class.\n    // Toggles the `--focus` CSS class.\n    // This `onBlur` interceptor is a workaround for `redux-form`\n    // so that it gets the up-to-date `value` in its `onBlur` handler.\n    // Without this fix it just gets the actual (raw) input field textual value.\n    // E.g. `+7 800 555 35 35` instead of `+78005553535`.\n    //\n    // A developer is not supposed to pass this `onBlur` property manually.\n    // Instead, `redux-form` passes `onBlur` to this component automatically\n    // and this component patches that `onBlur` handler (a hacky way but works).\n    //\n    // When country `<select/>` is toggled.\n    // Can be called externally.\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props3 = this.props,\n          name = _props3.name,\n          disabled = _props3.disabled,\n          disablePhoneInput = _props3.disablePhoneInput,\n          autoComplete = _props3.autoComplete,\n          countrySelectTabIndex = _props3.countrySelectTabIndex,\n          showCountrySelect = _props3.showCountrySelect,\n          style = _props3.style,\n          className = _props3.className,\n          inputClassName = _props3.inputClassName,\n          getInputClassName = _props3.getInputClassName,\n          countrySelectProperties = _props3.countrySelectProperties,\n          error = _props3.error,\n          indicateInvalid = _props3.indicateInvalid,\n          CountrySelectComponent = _props3.countrySelectComponent,\n          InputComponent = _props3.inputComponent,\n          ext = _props3.ext,\n          countries = _props3.countries,\n          countryOptions = _props3.countryOptions,\n          labels = _props3.labels,\n          _ = _props3.country,\n          flags = _props3.flags,\n          flagComponent = _props3.flagComponent,\n          flagsPath = _props3.flagsPath,\n          international = _props3.international,\n          internationalIcon = _props3.internationalIcon,\n          displayInitialValueAsLocalNumber = _props3.displayInitialValueAsLocalNumber,\n          onCountryChange = _props3.onCountryChange,\n          limitMaxLength = _props3.limitMaxLength,\n          locale = _props3.locale,\n          metadata = _props3.metadata,\n          phoneNumberInputProps = _objectWithoutProperties(_props3, ['name', 'disabled', 'disablePhoneInput', 'autoComplete', 'countrySelectTabIndex', 'showCountrySelect', 'style', 'className', 'inputClassName', 'getInputClassName', 'countrySelectProperties', 'error', 'indicateInvalid', 'countrySelectComponent', 'inputComponent', 'ext', 'countries', 'countryOptions', 'labels', 'country', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'displayInitialValueAsLocalNumber', 'onCountryChange', 'limitMaxLength', 'locale', 'metadata']);\n\n      var _state = this.state,\n          country = _state.country,\n          hidePhoneInputField = _state.hidePhoneInputField,\n          country_select_options = _state.country_select_options,\n          parsed_input = _state.parsed_input,\n          isFocused = _state.isFocused; // const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\n      // Extract `countrySelectProperties` from `this.props`\n      // also removing them from `phoneNumberInputProps`.\n\n      var _countrySelectProps = {};\n\n      if (countrySelectProperties) {\n        for (var key in countrySelectProperties) {\n          if (this.props.hasOwnProperty(key)) {\n            _countrySelectProps[countrySelectProperties[key]] = this.props[key];\n            delete phoneNumberInputProps[key];\n          }\n        }\n      }\n\n      return _react2.default.createElement('div', {\n        style: style,\n        className: (0, _classnames2.default)('react-phone-number-input', {\n          'react-phone-number-input--focus': isFocused,\n          'react-phone-number-input--invalid': error && indicateInvalid\n        }, className)\n      }, _react2.default.createElement('div', {\n        className: 'react-phone-number-input__row'\n      }, showCountrySelect && _react2.default.createElement(CountrySelectComponent, _extends({}, _countrySelectProps, {\n        ref: this.storeCountrySelectInstance,\n        name: name ? name + '__country' : undefined,\n        value: country,\n        options: country_select_options,\n        onChange: this.onCountryChange,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        disabled: disabled,\n        tabIndex: countrySelectTabIndex,\n        hidePhoneInputField: this.hidePhoneInputField,\n        focusPhoneInputField: this.focus,\n        className: 'react-phone-number-input__country'\n      })), !hidePhoneInputField && _react2.default.createElement(InputComponent, _extends({\n        type: 'tel',\n        name: name\n      }, phoneNumberInputProps, {\n        ref: this.storePhoneNumberInputInstance,\n        metadata: metadata,\n        country: country,\n        value: parsed_input || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onPhoneNumberKeyDown,\n        disabled: disabled || disablePhoneInput,\n        autoComplete: autoComplete,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__phone', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput,\n          'react-phone-number-input__input--invalid': error && indicateInvalid\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput,\n          invalid: error && indicateInvalid\n        }))\n      })), ext && !hidePhoneInputField && _react2.default.createElement('label', {\n        className: 'react-phone-number-input__ext'\n      }, labels.ext, _react2.default.cloneElement(ext, {\n        onChange: ext.props.onChange ? function (event) {\n          return ext.props.onChange(parseExtDigits(event));\n        } : undefined,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        className: (0, _classnames2.default)('react-phone-number-input__input', 'react-phone-number-input__ext-input', {\n          'react-phone-number-input__input--disabled': disabled || disablePhoneInput\n        }, inputClassName, getInputClassName && getInputClassName({\n          disabled: disabled || disablePhoneInput\n        }), ext.props.className)\n      }))), error && indicateInvalid && _react2.default.createElement('div', {\n        className: 'react-phone-number-input__error'\n      }, error));\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `parsed_input` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      var country = state.country,\n          hasUserSelectedACountry = state.hasUserSelectedACountry,\n          value = state.value,\n          _state$props = state.props,\n          old_default_country = _state$props.country,\n          old_value = _state$props.value;\n      var metadata = props.metadata,\n          countries = props.countries,\n          new_default_country = props.country,\n          new_value = props.value;\n      var new_state = {\n        // Emulate `prevProps` via `state.props`.\n        props: props,\n        // If the user has already manually selected a country\n        // then don't override that already selected country\n        // if the default `country` property changes.\n        // That's what `hasUserSelectedACountry` flag is for.\n        hasUserSelectedACountry: hasUserSelectedACountry // If `countries` or `labels` or `international` changed\n        // then re-generate country `<select/>` options.\n\n      };\n\n      if (props.countries !== state.props.countries || props.labels !== state.props.labels || props.international !== state.props.international) {\n        new_state.country_select_options = generate_country_select_options(props);\n      } // If the default country changed.\n      // (e.g. in case of ajax GeoIP detection after page loaded)\n      // then select it but only if the user hasn't already manually\n      // selected a country and no phone number has been entered so far.\n      // Because if the user has already started inputting a phone number\n      // then he's okay with no country being selected at all (\"International\")\n      // and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\n\n      if (new_default_country !== old_default_country && !hasUserSelectedACountry && !value && !new_value) {\n        return _extends({}, new_state, {\n          country: new_default_country // `value` is `undefined`.\n          // `parsed_input` is `undefined` because `value` is `undefined`.\n\n        });\n      } // If a new `value` is set externally.\n      // (e.g. as a result of an ajax API request\n      //  to get user's phone after page loaded)\n      // The first part — `new_value !== old_value` —\n      // is basically `props.value !== prevProps.value`\n      // so it means \"if value property was changed externally\".\n      // The second part — `new_value !== value` —\n      // is for ignoring the `getDerivedStateFromProps()` call\n      // which happens in `this.onChange()` right after `this.setState()`.\n      // If this `getDerivedStateFromProps()` call isn't ignored\n      // then the country flag would reset on each input.\n      else if (new_value !== old_value && new_value !== value) {\n          var parsed_number = (0, _inputControl.parsePhoneNumber)(new_value, metadata);\n          return _extends({}, new_state, {\n            parsed_input: generateParsedInput(new_value, parsed_number, props),\n            value: new_value,\n            country: new_value ? !countries || countries.indexOf(parsed_number.country) >= 0 ? parsed_number.country : undefined : country\n          });\n        } // `country` didn't change.\n      // `value` didn't change.\n      // `parsed_input` didn't change, because `value` didn't change.\n      //\n      // Maybe `new_state.country_select_options` changed.\n      // In any case, update `prevProps`.\n\n\n      return new_state;\n    }\n  }]);\n\n  return PhoneNumberInput;\n}(PureComponent), _class2.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   */\n  value: _propTypes2.default.string,\n\n  /**\r\n   * Updates the `value` as the user inputs the phone number.\r\n   */\n  onChange: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: _propTypes2.default.func,\n\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: _propTypes2.default.func,\n\n  /**\r\n   * `onKeyDown` handler (e.g. to handle Enter key press).\r\n   * @ignore\r\n   */\n  onKeyDown: _propTypes2.default.func,\n\n  /**\r\n   * Disables both the phone number `<input/>`\r\n   * and the country `<select/>`.\r\n   */\n  // (is `false` by default)\n  disabled: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Set to `true` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if this flag is set to `true`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, this flag is set to `false`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `false` by default)\n  displayInitialValueAsLocalNumber: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  country: _propTypes2.default.string,\n\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * Custom country `<select/>` option names.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   */\n  labels: _PropTypes.labels.isRequired,\n\n  /**\r\n   * The base URL path for country flag icons.\r\n   * By default it loads country flag icons from\r\n   * `flag-icon-css` repo github pages website.\r\n   * I imagine someone might want to download\r\n   * those country flag icons and host them\r\n   * on their own servers instead.\r\n   */\n  flagsPath: _propTypes2.default.string.isRequired,\n\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags replace the default ones.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": () => <img src=\"...\"/> }`\r\n   *\r\n   * Can be used to replace the default flags\r\n   * with custom ones for certain (or all) countries.\r\n   *\r\n   * Can also be used to bundle `<svg/>` flags instead of `<img/>`s:\r\n   *\r\n   * By default flag icons are inserted as `<img/>`s\r\n   * with their `src` pointed to `flag-icon-css` repo github pages website.\r\n   *\r\n   * There might be some cases\r\n   * (e.g. a standalone \"native\" app, or an \"intranet\" web application)\r\n   * when including the full set of `<svg/>` country flags (3 megabytes)\r\n   * is more appropriate than downloading them individually at runtime only if needed.\r\n   *\r\n   * Example:\r\n   *\r\n   * `// Uses <svg/> flags (3 megabytes):`\r\n   *\r\n   * `import flags from 'react-phone-number-input/flags'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: _propTypes2.default.objectOf(_propTypes2.default.func),\n\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * country : string — The country code.\r\n   * * flagsPath : string — The `flagsPath` property (see above).\r\n   * * flags : object — The `flags` property (see above).\r\n   */\n  flagComponent: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Set to `false` to drop the \"International\" option from country `<select/>`.\r\n   */\n  international: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * Custom \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Set to `false` to hide country `<select/>`.\r\n   */\n  // (is `true` by default)\n  showCountrySelect: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * HTML `tabindex` attribute for country `<select/>`.\r\n   */\n  countrySelectTabIndex: _propTypes2.default.number,\n\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — means \"the rest of the countries\" (can be omitted).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptions: _propTypes2.default.arrayOf(_propTypes2.default.string),\n\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: _propTypes2.default.object,\n\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: _propTypes2.default.string,\n\n  /**\r\n   * Phone number `<input/>` CSS class.\r\n   */\n  inputClassName: _propTypes2.default.string,\n\n  /**\r\n   * Returns phone number `<input/>` CSS class string.\r\n   * Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n   * @ignore\r\n   */\n  getInputClassName: _propTypes2.default.func,\n\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name : string?` — HTML `name` attribute.\r\n   * * `value : string?` — The currently selected country code.\r\n   * * `onChange(value : string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n   * * `disabled : boolean?` — HTML `disabled` attribute.\r\n   * * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className : string` — CSS class name.\r\n   */\n  //\n  // (deprecated)\n  // * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n  // * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n  //\n  countrySelectComponent: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n   * * `onChange(value : string)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n   * * `metadata : object` — `libphonenumber-js` metadata.\r\n   * * All other properties should be passed through to the underlying `<input/>`.\r\n   *\r\n   * Must also implement `.focus()` method.\r\n   */\n  inputComponent: _propTypes2.default.func.isRequired,\n\n  /**\r\n   * Set to `false` to use `inputComponent={InputBasic}`\r\n   * instead of `input-format`'s `<ReactInput/>`.\r\n   * Is `false` by default.\r\n   */\n  // smartCaret : PropTypes.bool.isRequired,\n\n  /**\r\n   * Phone number extension `<input/>` element.\r\n   *\r\n   * Example:\r\n   *\r\n   *\t`ext={<input value={...} onChange={...}/>}`\r\n   */\n  ext: _propTypes2.default.node,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: _propTypes2.default.bool.isRequired,\n\n  /**\r\n   * An error message to show below the phone number `<input/>`. For example, `\"Required\"`.\r\n   */\n  error: _propTypes2.default.string,\n\n  /**\r\n   * The `error` is shown only when `indicateInvalid` is `true`.\r\n   * (which is the default).\r\n   * @deprecated\r\n   * @ignore\r\n   */\n  indicateInvalid: _propTypes2.default.bool,\n\n  /**\r\n   * Translation JSON object. See the `locales` directory for examples.\r\n   */\n  locale: _propTypes2.default.objectOf(_propTypes2.default.string),\n\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: _PropTypes.metadata.isRequired,\n\n  /**\r\n   * A long time ago a person requested an `onCountryChange(country)` event listener.\r\n   * No valid reason was given other than compliance with some legacy code\r\n   * which stored both phone number and country in a database.\r\n   * @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n   */\n  onCountryChange: _propTypes2.default.func,\n\n  /**\r\n   * Disables only the phone number `<input/>`.\r\n   *\r\n   * Some users choose to implement a digital keyboard component for phone number input.\r\n   * In such cases the phone number input field must be disabled in order for the default system keyboard to not show up on focus.\r\n   * At the same time, country select should not be disabled in order for the user to be able to choose their country.\r\n   */\n  // (is `false` by default)\n  // https://github.com/catamphetamine/react-phone-number-input/issues/215\n  disablePhoneInput: _propTypes2.default.bool.isRequired\n}, _class2.defaultProps = {\n  /**\r\n   * Not disabled.\r\n   */\n  disabled: false,\n  disablePhoneInput: false,\n\n  /**\r\n   * Show `error` (if passed).\r\n   * @deprecated\r\n   */\n  indicateInvalid: true,\n\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: _Flag2.default,\n\n  /**\r\n   * By default use icons from `flag-icon-css` github repo.\r\n   */\n  flagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n  /**\r\n   * Default \"International\" country `<select/>` option icon (globe).\r\n   */\n  // internationalIcon: InternationalIcon,\n\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: _InputBasic2.default,\n\n  /**\r\n   * Show country `<select/>`.\r\n   */\n  showCountrySelect: true,\n\n  /**\r\n   * Don't convert the initially passed phone number `value`\r\n   * to a national phone number for its country.\r\n   * The reason is that the newer generation grows up when\r\n   * there are no stationary phones and therefore everyone inputs\r\n   * phone numbers with a `+` in their smartphones\r\n   * so phone numbers written in international form\r\n   * are gradually being considered more natural than local ones.\r\n   */\n  displayInitialValueAsLocalNumber: false,\n\n  /**\r\n   * Set to `false` to use `inputComponent={InputBasic}`\r\n   * instead of `input-format`'s `<ReactInput/>`.\r\n   * Is `false` by default.\r\n   */\n  // smartCaret : false,\n\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  international: true,\n\n  /**\r\n   * If set to `true` the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: false\n}, _initialiseProps = function _initialiseProps() {\n  var _this2 = this;\n\n  this.onCountryChange = function (new_country) {\n    var _props4 = _this2.props,\n        metadata = _props4.metadata,\n        onChange = _props4.onChange,\n        displayInitialValueAsLocalNumber = _props4.displayInitialValueAsLocalNumber;\n    var _state2 = _this2.state,\n        old_parsed_input = _state2.parsed_input,\n        old_country = _state2.country; // After the new `country` has been selected,\n    // if the phone number `<input/>` holds any digits\n    // then migrate those digits for the new `country`.\n\n    var new_parsed_input = (0, _inputControl.migrateParsedInputForNewCountry)(old_parsed_input, old_country, new_country, metadata, displayInitialValueAsLocalNumber);\n    var new_value = (0, _inputControl.e164)(new_parsed_input, new_country, metadata); // Focus phone number `<input/>` upon country selection.\n\n    _this2.focus(); // If the user has already manually selected a country\n    // then don't override that already selected country\n    // if the default `country` property changes.\n    // That's what `hasUserSelectedACountry` flag is for.\n\n\n    _this2.setState({\n      country: new_country,\n      hasUserSelectedACountry: true,\n      parsed_input: new_parsed_input,\n      value: new_value\n    }, function () {\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      onChange(new_value);\n    });\n  };\n\n  this.onPhoneNumberKeyDown = function (event) {\n    var onKeyDown = _this2.props.onKeyDown; // Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n    // (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n    // so can't hijack \"Down arrow\" keypress here.\n    // // Expand country `<select/>`` on \"Down arrow\" key press.\n    // if (event.keyCode === 40) {\n    // \tthis.country_select.toggle()\n    // }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  this.onChange = function (parsed_input) {\n    var _props5 = _this2.props,\n        onChange = _props5.onChange,\n        countries = _props5.countries,\n        international = _props5.international,\n        limitMaxLength = _props5.limitMaxLength,\n        metadata = _props5.metadata;\n    var country = _this2.state.country;\n\n    if (parsed_input) {\n      // If the phone number being input is an international one\n      // then tries to derive the country from the phone number.\n      // (regardless of whether there's any country currently selected)\n      if (parsed_input[0] === '+') {\n        var old_country = country;\n        country = (0, _inputControl.getCountryForParsedInput)(parsed_input, country, countries, international, metadata);\n      } // If this `onChange()` event was triggered\n      // as a result of selecting \"International\" country\n      // then force-prepend a `+` sign if the phone number\n      // `<input/>` value isn't in international format.\n      else if (!country) {\n          parsed_input = '+' + parsed_input;\n        }\n    } // Trim the input to not exceed the maximum possible number length.\n\n\n    if (limitMaxLength) {\n      parsed_input = (0, _inputControl.trimNumber)(parsed_input, country, metadata);\n    } // Generate the new `value` property.\n\n\n    var value = (0, _inputControl.e164)(parsed_input, country, metadata);\n\n    _this2.setState({\n      parsed_input: parsed_input,\n      value: value,\n      country: country\n    }, // Update the new `value` property.\n    // Doing it after the `state` has been updated\n    // because `onChange()` will trigger `getDerivedStateFromProps()`\n    // with the new `value` which will be compared to `state.value` there.\n    function () {\n      return onChange(value);\n    });\n  };\n\n  this._onFocus = function () {\n    return _this2.setState({\n      isFocused: true\n    });\n  };\n\n  this._onBlur = function () {\n    return _this2.setState({\n      isFocused: false\n    });\n  };\n\n  this.onFocus = function (event) {\n    var onFocus = _this2.props.onFocus;\n\n    _this2._onFocus();\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  this.onBlur = function (event) {\n    var onBlur = _this2.props.onBlur;\n    var value = _this2.state.value;\n\n    _this2._onBlur();\n\n    if (!onBlur) {\n      return;\n    } // `event` is React's `SyntheticEvent`.\n    // Its `.value` is read-only therefore cloning it.\n\n\n    var _event = _extends({}, event, {\n      target: _extends({}, event.target, {\n        value: value\n      }) // For `redux-form` event detection.\n      // https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\n    });\n\n    _event.stopPropagation = event.stopPropagation;\n    _event.preventDefault = event.preventDefault;\n    return onBlur(_event);\n  };\n\n  this.hidePhoneInputField = function (hide) {\n    _this2.setState({\n      hidePhoneInputField: hide\n    });\n  };\n\n  this.focus = function () {\n    return _this2.number_input.focus();\n  };\n\n  this.storeCountrySelectInstance = function (_) {\n    return _this2.country_select = _;\n  };\n\n  this.storePhoneNumberInputInstance = function (_) {\n    return _this2.number_input = _;\n  };\n}, _temp)) || _class; // Generates country `<select/>` options.\n\n\nexports.default = PhoneNumberInput;\n\nfunction generate_country_select_options(props) {\n  var countries = props.countries,\n      labels = props.labels,\n      international = props.international,\n      countryOptions = props.countryOptions;\n  var CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props);\n  return transformCountryOptions((0, _inputControl.getCountrySelectOptions)(countries || (0, _countries.getCountryCodes)(labels), labels, international).map(function (_ref) {\n    var value = _ref.value,\n        label = _ref.label;\n    return {\n      value: value,\n      label: label,\n      icon: CountrySelectOptionIcon\n    };\n  }), countryOptions);\n}\n\nfunction createCountrySelectOptionIconComponent(props) {\n  var flags = props.flags,\n      flagsPath = props.flagsPath,\n      FlagComponent = props.flagComponent,\n      InternationalIcon = props.internationalIcon;\n  return function (_ref2) {\n    var value = _ref2.value;\n    return _react2.default.createElement('div', {\n      className: (0, _classnames2.default)('react-phone-number-input__icon', {\n        'react-phone-number-input__icon--international': value === undefined\n      })\n    }, value ? _react2.default.createElement(FlagComponent, {\n      country: value,\n      flags: flags,\n      flagsPath: flagsPath\n    }) : _react2.default.createElement(InternationalIcon, null));\n  };\n} // Can move some country `<select/>` options\n// to the top of the list, for example.\n// See `countryOptions` property.\n\n\nfunction transformCountryOptions(options, transform) {\n  if (!transform) {\n    return options;\n  }\n\n  var optionsOnTop = [];\n  var optionsOnBottom = [];\n  var appendTo = optionsOnTop;\n\n  var _loop = function _loop() {\n    if (_isArray) {\n      if (_i >= _iterator.length) return 'break';\n      _ref3 = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) return 'break';\n      _ref3 = _i.value;\n    }\n\n    var element = _ref3;\n\n    if (element === '|') {\n      appendTo.push({\n        divider: true\n      });\n    } else if (element === '...' || element === '…') {\n      appendTo = optionsOnBottom;\n    } else {\n      // Find the position of the option.\n      var index = options.indexOf(options.filter(function (option) {\n        return option.value === element;\n      })[0]); // Get the option.\n\n      var option = options[index]; // Remove the option from its default position.\n\n      options.splice(index, 1); // Add the option on top.\n\n      appendTo.push(option);\n    }\n  };\n\n  for (var _iterator = transform, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref3;\n\n    var _ret = _loop();\n\n    if (_ret === 'break') break;\n  }\n\n  return optionsOnTop.concat(options).concat(optionsOnBottom);\n}\n\nfunction generateParsedInput(value, parsed_number, props) {\n  var displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n      metadata = props.metadata; // If the `value` (E.164 phone number)\n  // belongs to the currently selected country\n  // and `displayInitialValueAsLocalNumber` property is `true`\n  // then convert `value` (E.164 phone number)\n  // to a local phone number digits.\n  // E.g. '+78005553535' -> '88005553535'.\n\n  if (displayInitialValueAsLocalNumber && parsed_number.country) {\n    return (0, _inputControl.generateNationalNumberDigits)(parsed_number, metadata);\n  }\n\n  return value;\n}\n\nfunction validateCountryOptions(countries, metadata) {\n  for (var _iterator2 = countries, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n    var _ref4;\n\n    if (_isArray2) {\n      if (_i2 >= _iterator2.length) break;\n      _ref4 = _iterator2[_i2++];\n    } else {\n      _i2 = _iterator2.next();\n      if (_i2.done) break;\n      _ref4 = _i2.value;\n    }\n\n    var country = _ref4;\n\n    if (country && country !== '|' && country !== '...' && country !== '…') {\n      if (!metadata.countries[country]) {\n        throwCountryNotFound(country);\n      }\n    }\n  }\n}\n\nfunction validateCountries(countries, metadata) {\n  for (var _iterator3 = countries, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {\n    var _ref5;\n\n    if (_isArray3) {\n      if (_i3 >= _iterator3.length) break;\n      _ref5 = _iterator3[_i3++];\n    } else {\n      _i3 = _iterator3.next();\n      if (_i3.done) break;\n      _ref5 = _i3.value;\n    }\n\n    var country = _ref5;\n\n    if (!metadata.countries[country]) {\n      throwCountryNotFound(country);\n    }\n  }\n}\n\nfunction validateCountry(country, metadata) {\n  if (!metadata.countries[country]) {\n    throwCountryNotFound(country);\n  }\n}\n\nfunction throwCountryNotFound(country) {\n  throw new Error('Country not found: ' + country);\n}\n\nfunction parseExtDigits(event) {\n  if (event) {\n    if (typeof event === 'string') {\n      event = (0, _custom.parseDigits)(event);\n    } else if (event.target && event.target.value) {\n      event.target.value = (0, _custom.parseDigits)(event.target.value);\n    }\n  }\n\n  return event;\n}","map":null,"metadata":{},"sourceType":"script"}